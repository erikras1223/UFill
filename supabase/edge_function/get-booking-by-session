import { corsHeaders } from "./cors.ts";
import { createClient } from 'npm:@supabase/supabase-js@2';
const supabase = createClient(Deno.env.get('SUPABASE_URL'), Deno.env.get('SUPABASE_SERVICE_ROLE_KEY'));
Deno.serve(async (req)=>{
  if (req.method === "OPTIONS") {
    return new Response("ok", {
      headers: corsHeaders
    });
  }
  try {
    const { sessionId } = await req.json();
    if (!sessionId) {
      throw new Error("Session ID is required.");
    }
    // Instead of multiple queries, we can join the data in one go, starting from stripe_payment_info
    const { data: booking, error: bookingError } = await supabase.from('stripe_payment_info').select(`
        bookings!inner(
          *,
          customers!inner(*)
        ),
        *
      `).eq('stripe_checkout_session_id', sessionId).single();
    if (bookingError || !booking || !booking.bookings) {
      console.error("Error fetching booking by session ID:", bookingError);
      const errorMessage = bookingError ? bookingError.message : "Could not find a booking for the provided session.";
      throw new Error(errorMessage);
    }
    // Restructure the data to match what the frontend expects
    const finalBookingData = {
      ...booking.bookings,
      stripe_payment_info: [
        {
          id: booking.id,
          booking_id: booking.booking_id,
          stripe_customer_id: booking.stripe_customer_id,
          stripe_payment_intent_id: booking.stripe_payment_intent_id,
          stripe_charge_id: booking.stripe_charge_id,
          stripe_checkout_session_id: booking.stripe_checkout_session_id,
          created_at: booking.created_at,
          updated_at: booking.updated_at
        }
      ]
    };
    return new Response(JSON.stringify({
      booking: finalBookingData
    }), {
      headers: {
        ...corsHeaders,
        "Content-Type": "application/json"
      },
      status: 200
    });
  } catch (error) {
    console.error("Get booking by session error:", error.message);
    return new Response(JSON.stringify({
      error: error.message
    }), {
      headers: {
        ...corsHeaders,
        "Content-Type": "application/json"
      },
      status: 500
    });
  }
});
